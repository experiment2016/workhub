environ({'DEFLOGDIR': 'C:\\Documents and Settings\\All Users\\Dati applicazioni\\McAfee\\DesktopProtection', 'ALLUSERSPROFILE': 'C:\\Documents and Settings\\All Users', 'NUMBER_OF_PROCESSORS': '2', '__COMPAT_LAYER': 'EnableNXShowUI ', 'USERDOMAIN': 'PC-QUATTRO', 'COMSPEC': 'C:\\WINDOWS\\system32\\cmd.exe', 'PROGRAMFILES': 'C:\\Programmi', 'APPDATA': 'C:\\Documents and Settings\\QUATTRO\\Dati applicazioni', 'USERNAME': 'QUATTRO', 'PROCESSOR_IDENTIFIER': 'x86 Family 6 Model 14 Stepping 8, GenuineIntel', 'SESSIONNAME': 'Console', 'USERPROFILE': 'C:\\Documents and Settings\\QUATTRO', 'OS': 'Windows_NT', 'VBOX_MSI_INSTALL_PATH': 'C:\\Programmi\\Oracle\\VirtualBox\\', 'CLIENTNAME': 'Console', 'COMPUTERNAME': 'PC-QUATTRO', 'VSEDEFLOGDIR': 'C:\\Documents and Settings\\All Users\\Dati applicazioni\\McAfee\\DesktopProtection', 'FP_NO_HOST_CHECK': 'NO', 'SYSTEMDRIVE': 'C:', 'LOGONSERVER': '\\\\PC-QUATTRO', 'COMMONPROGRAMFILES': 'C:\\Programmi\\File comuni', 'TEMP': 'C:\\Documents and Settings\\QUATTRO\\Impostazioni locali\\Temp', 'PATH': 'C:\\Python34\\;C:\\Python34\\Scripts;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem', 'PROCESSOR_ARCHITECTURE': 'x86', 'TMP': 'C:\\Documents and Settings\\QUATTRO\\Impostazioni locali\\Temp', 'PROCESSOR_REVISION': '0e08', 'SYSTEMROOT': 'C:\\WINDOWS', 'PROCESSOR_LEVEL': '6', 'WINDIR': 'C:\\WINDOWS', 'HOMEPATH': '\\Documents and Settings\\QUATTRO', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.PY', 'HOMEDRIVE': 'C:'})